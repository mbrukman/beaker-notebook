/*
 *  Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin:'java'

apply plugin:'application'
mainClassName = 'com.twosigma.beaker.core.Main'

def windows() {
  return System.getProperty('os.name').contains('Windows')
}
def mac() {
  return System.getProperty('os.name').contains('Mac')
}
def winOrUnix(Object... args) {
  if (windows()) {
    return (['cmd', '/c'] << args).flatten()
  }
  else {
    return args
  }
}

repositories {
  mavenCentral()
}

dependencies {
  compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
  compile group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.17.1'
  compile group: 'com.sun.jersey', name: 'jersey-server', version: '1.17.1'
  compile group: 'com.sun.jersey', name: 'jersey-core', version: '1.17.1'
  compile group: 'commons-cli', name: 'commons-cli', version: '1.2'
  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.3'
  compile group: 'org.apache.httpcomponents', name: 'fluent-hc', version: '4.3.1'
  compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '8.1.13.v20130916'
  compile group: 'org.jvnet.winp', name: 'winp', version: '1.18'
  compile group: 'org.samba.jcifs', name: 'jcifs', version: '1.3.3'
  runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.6'
  compile project(':shared')
}


task (npmInstall, type: Exec) {
  commandLine(*(winOrUnix('npm', 'install')))
}

task (bowerInstall, type: Exec) {
  if (windows()) {
    commandLine 'cmd', '/c', 'bower', 'install'
  } else {
    commandLine './node_modules/bower/bin/bower', 'install'
  }
}

task (zipPackages, type: Exec) {
  commandLine(*(winOrUnix('zip', '-r', '../data/allDeps.zip', 'src/vendor/')))
}



task (copyDTImages, type: Copy) {
	from 'src/vendor/bower_components/datatables/media/images/'
	into 'src/main/web/app/images/'
}
task (copyAwesomeFonts, type: Copy) {
    from 'src/vendor/bower_components/font-awesome/fonts/'
	into 'src/main/web/app/fonts/'
}	
task (copyBootStrapFonts, type: Copy) {
	from 'src/vendor/bower_components/bootstrap-sass/assets/fonts/bootstrap/'
	into 'src/main/web/app/fonts/'
}

task copyStuff
copyStuff.dependsOn copyDTImages
copyStuff.dependsOn copyAwesomeFonts
copyStuff.dependsOn copyBootStrapFonts

task updatePackages

task (copyMathJax, type: Copy) {
	from 'src/vendor/MathJax-2.5-latest/'
	into 'src/main/web/app/vendor/mathjax/'
	exclude '**.md'
	exclude '**.json'
	exclude 'docs'
	exclude 'test'
	exclude 'LICENSE'
	exclude 'unpacked'
}

task copyVendorStuff
copyVendorStuff.dependsOn copyMathJax

task (extractPackages, type: Exec) {
  commandLine(*(winOrUnix('unzip', '-oq', '../data/allDeps.zip')))
}

task (compileCss, type: Exec) {
  commandLine(*(winOrUnix('npm', 'run-script', 'compile')))
}

task (compileCssDebug, type: Exec) {
  commandLine(*(winOrUnix('npm', 'run-script', 'compile', '--', '--debug')))
}

task (prepareNamespaceApp, type: Copy) {
  from 'src/main/web/app/dist/beakerApp.css'
  to 'src/main/web/app/temp/_beakerApp.scss'
}
task (prepareNamespaceOutputDisplay, type: Copy) {
  from 'src/main/web/app/dist/beakerOutputDisplay.css'
  to 'src/main/web/app/temp/_beakerOutputDisplay.scss'
}
task (namespaceCss, type: Copy) {
  commandLine(*(winOrUnix('npm', 'run-script', 'namespaceCss')))
}

task (copyNginx, type: Exec) {
  if (mac()) {
    def brewLocation = 'which brew'.execute().text[0..-10]
    commandLine 'cp', '-f',
      brewLocation + 'lib/libpcre.1.dylib',
      brewLocation + 'bin/nginx',
      brewLocation + 'opt/openssl/lib/libssl.1.0.0.dylib',
      brewLocation + 'opt/openssl/lib/libcrypto.1.0.0.dylib',
      brewLocation + 'etc/nginx/mime.types',
      'nginx/bin'
  } else if (windows()) {
    def nginxLocation = 'cmd /c where nginx'.execute().text.trim()
    commandLine 'cmd', '/c', 'xcopy', '/Y', '/Q', nginxLocation, 'nginx\\bin', '&', 'xcopy', '/Y', '/Q', nginxLocation + '\\..\\conf\\mime.types', 'nginx\\bin'
  }
}

task builddebug
task debug

bowerInstall.dependsOn npmInstall
//namespaceCss.dependsOn compileCss
compileCss.dependsOn npmInstall
compileCss.dependsOn extractPackages
compileCssDebug.dependsOn npmInstall
compileCssDebug.dependsOn extractPackages
updatePackages.dependsOn extractPackages
updatePackages.dependsOn bowerInstall
updatePackages.dependsOn copyStuff
bowerInstall.mustRunAfter extractPackages
copyStuff.mustRunAfter bowerInstall
copyVendorStuff.mustRunAfter extractPackages
build.dependsOn compileCss
builddebug.dependsOn compileCssDebug
run.dependsOn build
run.dependsOn jar
run.dependsOn copyVendorStuff
debug.dependsOn builddebug
debug.dependsOn jar
debug.dependsOn copyVendorStuff

if (mac() || windows()) {
  build.dependsOn copyNginx
  builddebug.dependsOn copyNginx
  run.dependsOn copyNginx
  startScripts {
    defaultJvmOpts=['-Dbeaker.nginx.bin.dir=' + './nginx/bin']
  }
}

compileJava {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

if (hasProperty('inTesting')) {
  run {
    args '--disable-kerberos', '--default-notebook', 'config/default-test.bkr'
  }
}

if (hasProperty('includeDepsInJar')) {
  build.dependsOn jar
  jar {
    // need to remove META-INF/*.SF to use this.
    from {
       configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    } {
      exclude "META-INF/*.SF"
    }
  }
}
